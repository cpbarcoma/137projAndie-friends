import java.net.*;
import java.io.*;
import java.util.Scanner;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
//import java.awt.Toolkit;

/*
dagdag
*/
import java.awt.event.*;
import java.awt.*;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.plaf.basic.BasicArrowButton;

import java.awt.Color;
import javax.swing.JFrame;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.GridLayout;

public class GameFrame extends JPanel{

	JFrame frame= new JFrame();

	BufferedImage offscreen;

// Additional UI elements
	JPanel northPanel;
	JPanel buttonPanel, scorePanel, timePanel;
	JButton exitBtn, helpBtn;
	JLabel redScore, blueScore, timeRem;
	String redScoreTxt, blueScoreTxt, timeRemTxt, origTime;

	// South panel elements
	JPanel southPanel;
	// Temporary solution: Buttons or pure text
	BasicArrowButton[] instBtn = new BasicArrowButton[4];
	JLabel instMove, instShoot;
    
    // Used to randomly generate a "name"
    Random rand = new Random();

    TankDrawing td;
    Hook hook;
    Boolean isShooting = false;

	public GameFrame(){
		while (this.name.equals("")) {
		this.name = JOptionPane.showInputDialog(null,
												"Enter your name:",
												"SHOOKT",
												JOptionPane.PLAIN_MESSAGE);
		}

	}


	// set up North panel
	public JPanel setupNorth(JPanel np) {
		redScoreTxt = "0";
		blueScoreTxt = "0";
		timeRemTxt = "";
		PopUp helpPanel = new PopUp();

		// Button panel
		buttonPanel = new JPanel();
		buttonPanel.setBackground(new Color(52, 56, 63));
		exitBtn = new JButton("EXIT");
		exitBtn.setBackground(new Color(122, 122, 122));
		exitBtn.setForeground(Color.WHITE);
		// Exiting the game
		exitBtn.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent e){
				int exit = JOptionPane.showConfirmDialog(frame,
					"Are you sure you want to exit the game?",
					"Exit",
					JOptionPane.YES_NO_OPTION);
				if (exit == 0) {
					frame.dispose();
					System.exit(0);
				} else {
					frame.requestFocus();
				}
			}
		});

		helpBtn = new JButton("HELP");
		helpBtn.setBackground(new Color(122, 122, 122));
		helpBtn.setForeground(Color.WHITE);
		// Opening a new window/showing game mechanics
		helpBtn.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent e){
				int choice = JOptionPane.showConfirmDialog(frame,
					helpPanel.getHelpPanel(),
					"INSTRUCTIONS",
					JOptionPane.PLAIN_MESSAGE);
				if (choice == JOptionPane.CLOSED_OPTION
					|| choice == JOptionPane.CANCEL_OPTION
					|| choice == JOptionPane.YES_OPTION
					|| choice == JOptionPane.NO_OPTION) {
					frame.requestFocus();
				}
			}
		});

		buttonPanel.add(exitBtn);
		buttonPanel.add(helpBtn);

		// Score panel
		scorePanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
		scorePanel.setBackground(new Color(52, 56, 63));
		redScore = new JLabel("RED " + redScoreTxt);
		redScore.setForeground(Color.RED);
		blueScore = new JLabel(blueScoreTxt + " BLUE");
		blueScore.setForeground(Color.CYAN);
		scorePanel.add(redScore);
		scorePanel.add(blueScore);
		
		// Time panel
		timePanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
		timePanel.setBackground(new Color(52, 56, 63));
		timeRem = new JLabel("TIME: " + timeRemTxt);
		timeRem.setForeground(Color.WHITE);
		timePanel.add(timeRem);

		np.add(buttonPanel);
		np.add(scorePanel);
		np.add(timePanel);

		return np;
	}


	// set up South panel
	public JPanel setupSouth(JPanel sp) {
		// Instructions: buttons and text
		// get pictures of arrow buttons
		instBtn[0] = new BasicArrowButton(BasicArrowButton.NORTH,
											new Color(122, 122, 122),
											new Color(122, 122, 122),
											Color.WHITE,
											new Color(132, 132, 132));
		instBtn[1] = new BasicArrowButton(BasicArrowButton.SOUTH,
											new Color(122, 122, 122),
											new Color(122, 122, 122),
											Color.WHITE,
											new Color(132, 132, 132));
		instBtn[2] = new BasicArrowButton(BasicArrowButton.WEST,
											new Color(122, 122, 122),
											new Color(122, 122, 122),
											Color.WHITE,
											new Color(132, 132, 132));
		instBtn[3] = new BasicArrowButton(BasicArrowButton.EAST,
											new Color(122, 122, 122),
											new Color(122, 122, 122),
											Color.WHITE,
											new Color(132, 132, 132));

		instMove = new JLabel("MOVEMENT:");
		instMove.setForeground(Color.WHITE);
		instShoot = new JLabel("SHOOT: /");
		instShoot.setForeground(Color.WHITE);

		sp.add(instMove);
		for (int i=0; i<4; i++) {
			sp.add(instBtn[i]);
		}
		sp.add(instShoot);

		sp.setBackground(new Color(52, 56, 63));
		return sp; //WAHHHHH
	}





























}
